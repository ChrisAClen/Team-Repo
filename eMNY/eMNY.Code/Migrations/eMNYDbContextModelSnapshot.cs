// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eMNY.Code;

namespace eMNY.Code.Migrations
{
    [DbContext(typeof(eMNYDbContext))]
    partial class eMNYDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eMNY.Domain.Abstracts.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber");

                    b.Property<double>("Balance");

                    b.Property<int?>("CardId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("CustomerId");

                    b.Property<double>("Deposit");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<double>("InterestRate");

                    b.Property<bool>("IsChecking");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Account");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Account");
                });

            modelBuilder.Entity("eMNY.Domain.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("PostalCode");

                    b.Property<string>("StateProvince");

                    b.Property<string>("Street");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("eMNY.Domain.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CardNumber");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<int>("Pin");

                    b.Property<int>("SecurityNumber");

                    b.HasKey("Id");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("eMNY.Domain.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<int?>("AddressId");

                    b.Property<int?>("CardId");

                    b.Property<string>("Email");

                    b.Property<int?>("NameId");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CardId");

                    b.HasIndex("NameId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("eMNY.Domain.Models.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<double>("CurrentBalance");

                    b.Property<string>("ExpenseName");

                    b.Property<DateTime>("StartDate");

                    b.Property<double>("TargetBalance");

                    b.Property<DateTime>("TargetDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("eMNY.Domain.Models.Name", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("First");

                    b.Property<string>("Last");

                    b.HasKey("Id");

                    b.ToTable("Names");
                });

            modelBuilder.Entity("eMNY.Domain.Models.Transactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("IsDeposit");

                    b.Property<double>("TransactionAmount");

                    b.Property<DateTime>("TransactionDate");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("eMNY.Domain.Models.CheckingAccount", b =>
                {
                    b.HasBaseType("eMNY.Domain.Abstracts.Account");

                    b.Property<double>("CheckingId");

                    b.HasDiscriminator().HasValue("CheckingAccount");
                });

            modelBuilder.Entity("eMNY.Domain.Models.SavingsAccount", b =>
                {
                    b.HasBaseType("eMNY.Domain.Abstracts.Account");

                    b.Property<double>("SavingsId");

                    b.HasDiscriminator().HasValue("SavingsAccount");
                });

            modelBuilder.Entity("eMNY.Domain.Abstracts.Account", b =>
                {
                    b.HasOne("eMNY.Domain.Models.Card")
                        .WithMany("Account")
                        .HasForeignKey("CardId");

                    b.HasOne("eMNY.Domain.Models.Customer")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("eMNY.Domain.Models.Customer", b =>
                {
                    b.HasOne("eMNY.Domain.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("eMNY.Domain.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId");

                    b.HasOne("eMNY.Domain.Models.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");
                });

            modelBuilder.Entity("eMNY.Domain.Models.Transactions", b =>
                {
                    b.HasOne("eMNY.Domain.Models.Customer")
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
